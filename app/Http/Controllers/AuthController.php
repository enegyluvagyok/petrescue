<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\ValidationException;
use App\Models\User;
use Throwable;

class AuthController extends Controller
{
    // ğŸ”¹ RegisztrÃ¡ciÃ³
    public function register(Request $request)
    {
        try {
            $validated = $request->validate([
                'name' => 'required|string|max:255',
                'email' => 'required|string|email|max:255|unique:users',
                'password' => 'required|string|min:6|confirmed',
            ]);

            $user = User::create([
                'name' => $validated['name'],
                'email' => $validated['email'],
                'password' => Hash::make($validated['password']),
            ]);

            // ğŸ”¹ KÃ¼ldjÃ¼k el az email verification linket
            $user->sendEmailVerificationNotification();

            return response()->json([
                'success' => true,
                'message' => 'Sikeres regisztrÃ¡ciÃ³! KÃ©rlek, erÅ‘sÃ­tsd meg az e-mailedet a kÃ¼ldÃ¶tt linken.',
                'data' => [
                    'user' => $user,
                ],
            ], 201);
        } catch (ValidationException $e) {
            return response()->json([
                'success' => false,
                'message' => 'HibÃ¡san megadott adatok.',
                'errors' => $e->errors(),
            ], 422);
        } catch (Throwable $e) {
            return response()->json([
                'success' => false,
                'message' => 'Szerverhiba tÃ¶rtÃ©nt a regisztrÃ¡ciÃ³ sorÃ¡n.',
                'error' => $e->getMessage(),
            ], 500);
        }
    }


    // ğŸ”¹ BejelentkezÃ©s
    public function login(Request $request)
    {
        try {
            $validated = $request->validate([
                'email' => 'required|email',
                'password' => 'required|string',
            ]);

            $user = User::where('email', $validated['email'])->first();

            // ğŸ”¹ HibÃ¡s email vagy jelszÃ³
            if (! $user || ! Hash::check($validated['password'], $user->password)) {
                return response()->json([
                    'success' => false,
                    'message' => 'HibÃ¡s email vagy jelszÃ³.',
                    'errors' => ['email' => ['HibÃ¡s email vagy jelszÃ³.']],
                ], 401);
            }

            // ğŸ”¹ EllenÅ‘rizzÃ¼k, hogy az e-mail megerÅ‘sÃ­tve van-e
            if (! $user->hasVerifiedEmail()) {
                return response()->json([
                    'success' => false,
                    'message' => 'KÃ©rlek, erÅ‘sÃ­tsd meg az e-mail cÃ­medet, mielÅ‘tt bejelentkezel.',
                    'errors' => ['email' => ['A fiÃ³k mÃ©g nincs megerÅ‘sÃ­tve.']],
                ], 403);
            }

            // ğŸ”¹ (OpcionÃ¡lis) rÃ©gi tokenek tÃ¶rlÃ©se, hogy mindig csak 1 aktÃ­v legyen
            $user->tokens()->delete();

            // ğŸ”¹ Ãšj token generÃ¡lÃ¡sa
            $token = $user->createToken('auth_token')->plainTextToken;

            return response()->json([
                'success' => true,
                'message' => 'Sikeres bejelentkezÃ©s.',
                'data' => [
                    'user' => $user,
                    'token' => $token,
                ],
            ]);
        } catch (ValidationException $e) {
            return response()->json([
                'success' => false,
                'message' => 'HibÃ¡san megadott adatok.',
                'errors' => $e->errors(),
            ], 422);
        } catch (Throwable $e) {
            return response()->json([
                'success' => false,
                'message' => 'Szerverhiba tÃ¶rtÃ©nt a bejelentkezÃ©s sorÃ¡n.',
                'error' => $e->getMessage(),
            ], 500);
        }
    }


    // ğŸ”¹ SajÃ¡t profil lekÃ©rÃ©se
    public function me(Request $request)
    {
        return response()->json([
            'success' => true,
            'data' => $request->user(),
        ]);
    }

    // ğŸ”¹ KijelentkezÃ©s
    public function logout(Request $request)
    {
        try {
            $request->user()->currentAccessToken()->delete();

            return response()->json([
                'success' => true,
                'message' => 'Sikeresen kijelentkeztÃ©l.',
            ]);
        } catch (Throwable $e) {
            return response()->json([
                'success' => false,
                'message' => 'Szerverhiba tÃ¶rtÃ©nt kijelentkezÃ©s kÃ¶zben.',
                'error' => $e->getMessage(),
            ], 500);
        }
    }
}
